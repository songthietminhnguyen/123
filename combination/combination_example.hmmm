################################################################################
# Combinations C(n,k) solution
# Minh Nguyen
################################################################################

################################################################################
# register usage
################################################################################
# r0 <- 0              # Constant 0
# r1 <- n              # Input: n
# r2 <- k              # Input: k
# r3 <- n - k          # Temporary value for n - k
# r4 <- n!             # Stores factorial(n)
# r5 <- k!             # Stores factorial(k)
# r6 <- (n - k)!       # Stores factorial(n - k)
# r7 <- C(n, k)        # Final result: C(n, k)
# r13 <- Return value  # Return value from factorial function
# r14 <- Return address# Stores the return address for function calls
# r15 <- Stack pointer # Stack pointer for function calls

################################################################################
# Main Program: Read n and k, calculate C(n,k), print result, and halt
################################################################################

0    read  r1          # Read n from the user
1    read  r2          # Read k from the user

# Validate input: k <= n
2    sub   r3 r1 r2    # r3 = n - k
3    jltn  r3 70       # If k > n, jump to error (halt program)

# Call factorial(n)
4    copy  r14 r15     # Save return address for factorial call
5    addn  r15 1       # Increment stack pointer
6    calln r13 20      # Call factorial(n)
7    copy  r4 r13      # Store result (n!) in r4

# Call factorial(k)
8    copy  r14 r15     # Save return address for factorial call
9    addn  r15 1       # Increment stack pointer
10   calln r13 20      # Call factorial(k)
11   copy  r5 r13      # Store result (k!) in r5

# Call factorial(n - k)
12   copy  r14 r15     # Save return address for factorial call
13   addn  r15 1       # Increment stack pointer
14   calln r13 20      # Call factorial(n - k)
15   copy  r6 r13      # Store result (n - k)! in r6

# Calculate C(n, k) = n! / (k! * (n - k)!)
16   mul   r5 r5 r6    # r5 = k! * (n - k)!
17   div   r7 r4 r5    # r7 = n! / (k! * (n - k)!)

# Output the result
18   write r7          # Write the result (C(n, k))

# End program
19   halt              # Halt the program

################################################################################
# Error handling
################################################################################
70   setn  r0 99       # Set error code
71   write r0          # Print error message (99)
72   halt              # Halt on error

################################################################################
# Factorial function: factorial(x)
# This function calculates factorial of r1 (x!)
################################################################################
20   setn  r13 1       # Set r13 = 1 (initial factorial value)
21   jeqzn r1 25       # If r1 == 0, return 1 (base case)
22   mul   r13 r13 r1  # r13 = r13 * r1 (factorial step)
23   addn  r1 -1       # r1 = r1 - 1
24   jgtzn r1 22       # Repeat until r1 = 0
25   jumpr r14         # Return to caller with result in r13